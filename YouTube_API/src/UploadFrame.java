
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Danielyt
 */
public class UploadFrame extends javax.swing.JFrame {

    /**
     * Creates new form UploadFrame
     */
    private JFrame pparent; //which frame called this one
    private YoutubeVideo[] filesToUpload;
    private final int NUMBER_OF_FILES_TO_UPLOAD = 10;
    private int fileIndex; //
    private JFileChooser uploadFileChooser;
    private ProgressMonitor progressMonitor;
    private UploadTask task;
    
    //inner class
    private class UploadTask extends SwingWorker<Void, Void> {
        @Override
        public synchronized Void doInBackground() {          
            int progress = 0;
            setProgress(0);
            //try {               
                //Thread.sleep(1000);
                int i = 0;
                while (i <= fileIndex && !isCancelled()) {
                    //Sleep for up to one second.
                    //Thread.sleep(random.nextInt(1000));
                    YouTubeActions.uploadVideo(filesToUpload[i]);
                    filesToUpload[i++] = null;
                    progress++;
                    setProgress(progress);
                }
                System.out.println("Taks done");
             //catch (InterruptedException ignore) {}
            return null;
        }
 
        @Override
        public synchronized void done() {
            System.out.println("in UploadTaks done");
            updateFilesToUpload();
            populateFilesToUploadList();
            UploadFrame.this.setEnabled(true);
            progressMonitor.close();
        }
    }
    
    public UploadFrame() {
        this(null);
    }
    
    public UploadFrame (JFrame pparent){
        this.pparent = pparent;
        filesToUpload = new YoutubeVideo[NUMBER_OF_FILES_TO_UPLOAD];
        fileIndex = -1;
        initComponents();
        uploadFileChooser = new JFileChooser();
        uploadFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        uploadFileChooser.setMultiSelectionEnabled(true);
        uploadFileChooser.setFileFilter(new VideoFileFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        upperUploadPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        filesToUploadList = new javax.swing.JList();
        chooseFilesButton = new javax.swing.JButton();
        editVideoButton = new javax.swing.JButton();
        removeFilesButton = new javax.swing.JButton();
        lowerUploadPanel = new javax.swing.JPanel();
        uploadVideosButton = new javax.swing.JButton();
        cancelVideoUploadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Choose files to upload");
        setMinimumSize(new java.awt.Dimension(270, 380));
        setPreferredSize(new java.awt.Dimension(600, 380));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        upperUploadPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        upperUploadPanel.setMaximumSize(new java.awt.Dimension(600, 320));
        upperUploadPanel.setMinimumSize(new java.awt.Dimension(200, 320));
        upperUploadPanel.setName("Files to upload:"); // NOI18N
        upperUploadPanel.setPreferredSize(new java.awt.Dimension(580, 320));

        jLabel4.setText("Files to uplaod:");
        upperUploadPanel.add(jLabel4);

        jScrollPane3.setMaximumSize(new java.awt.Dimension(240, 252));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(240, 252));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(580, 252));

        filesToUploadList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filesToUploadListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(filesToUploadList);

        upperUploadPanel.add(jScrollPane3);

        chooseFilesButton.setText("Choose Files");
        chooseFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFilesButtonActionPerformed(evt);
            }
        });
        upperUploadPanel.add(chooseFilesButton);

        editVideoButton.setText("Edit");
        editVideoButton.setEnabled(false);
        editVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editVideoButtonActionPerformed(evt);
            }
        });
        upperUploadPanel.add(editVideoButton);

        removeFilesButton.setText("Remove");
        removeFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFilesButtonActionPerformed(evt);
            }
        });
        upperUploadPanel.add(removeFilesButton);

        getContentPane().add(upperUploadPanel);

        lowerUploadPanel.setLayout(new javax.swing.BoxLayout(lowerUploadPanel, javax.swing.BoxLayout.X_AXIS));

        uploadVideosButton.setText("Upload");
        uploadVideosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadVideosButtonActionPerformed(evt);
            }
        });
        lowerUploadPanel.add(uploadVideosButton);

        cancelVideoUploadButton.setText("Cancel");
        cancelVideoUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelVideoUploadButtonActionPerformed(evt);
            }
        });
        lowerUploadPanel.add(cancelVideoUploadButton);

        getContentPane().add(lowerUploadPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void updateFilesToUpload(){
        int j = -1;
        for (int i = 0; i < fileIndex; i++) {
            if( filesToUpload[i] == null && filesToUpload[i+1] != null) {
                filesToUpload[++j] = new YoutubeVideo(filesToUpload[i+1]);
                filesToUpload[i+1] = null;
            }
            else if (filesToUpload[i] != null) {
                filesToUpload[++j] = new YoutubeVideo(filesToUpload[i]);
            }
        }
        fileIndex = j;
    }
    
    public void populateFilesToUploadList(){
        DefaultListModel listModel = new DefaultListModel();
        filesToUploadList.setModel(listModel);
        for (int i = 0; i <= fileIndex; i++)
            listModel.addElement(filesToUpload[i].getSourceFile().getAbsolutePath());
    }
    
    private void chooseFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFilesButtonActionPerformed
        // TODO add your handling code here:        
        File currentDirectory = uploadFileChooser.getCurrentDirectory();
        // Hack alert
        uploadFileChooser.setSelectedFile(new File(""));
        uploadFileChooser.setCurrentDirectory(currentDirectory);

        int result = uploadFileChooser.showOpenDialog(this);
        if (result != JFileChooser.CANCEL_OPTION){
            File[] files = uploadFileChooser.getSelectedFiles();
            //more files can be added to filesToUpload array
            if( fileIndex + 1 + files.length <= NUMBER_OF_FILES_TO_UPLOAD) {
                for( int i = 0; i < files.length; i++) {
                    filesToUpload[++fileIndex] = new YoutubeVideo (new File ( files[i].getAbsolutePath( )) );
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "You can't choose more than " +
                        NUMBER_OF_FILES_TO_UPLOAD + " files at once.",
                   "Too many files", JOptionPane.ERROR_MESSAGE);
            }
            populateFilesToUploadList();
        }
    }//GEN-LAST:event_chooseFilesButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (pparent != null){
            pparent.setEnabled(true);
        }
    }//GEN-LAST:event_formWindowClosing

    private void removeFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFilesButtonActionPerformed
        // TODO add your handling code here:
        DefaultListModel dlm = (DefaultListModel) filesToUploadList.getModel();
        //remove selected files
        if(this.filesToUploadList.getSelectedIndices().length > 0) {
            int[] selectedIndices = filesToUploadList.getSelectedIndices();
            for (int i = selectedIndices.length-1; i >=0; i--) {
                dlm.removeElementAt(selectedIndices[i]);
                filesToUpload[ selectedIndices[i] ] = null;
            }
            //update filesToUplaod array
            
            updateFilesToUpload();
            
            /* fileIndex = dlm.size() - 1;
            for (int i = 0; i <= fileIndex; i++) {
                filesToUpload[i] = new File( (String) dlm.get(i) );
            }
            
            for (int i = fileIndex + 1; i < NUMBER_OF_FILES_TO_UPLOAD; i++) {
                filesToUpload[i] = null;
            }
            */
        }
    }//GEN-LAST:event_removeFilesButtonActionPerformed

    private void editVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editVideoButtonActionPerformed
        // TODO add your handling code here:
        VideoPropertiesFrame videoPropertiesFrame = new VideoPropertiesFrame(this,
                filesToUpload[ filesToUploadList.getSelectedIndex()]);
        //uploadFrame.setSize(250,420);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        // Determine the new location of the window
        Dimension videoPropertiesFrameSize = videoPropertiesFrame.getSize();
        
        // Move the window
        videoPropertiesFrame.setLocation((dim.width - videoPropertiesFrameSize.width)/2,
                (dim.height - videoPropertiesFrameSize.height)/2);
        videoPropertiesFrame.setVisible(true);
        
        this.setEnabled(false);
    }//GEN-LAST:event_editVideoButtonActionPerformed

    private void filesToUploadListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filesToUploadListValueChanged
        // TODO add your handling code here:         
        if (filesToUploadList.getSelectedIndices().length == 1){
            editVideoButton.setEnabled(true);
        }
        else {
            editVideoButton.setEnabled(false);
        }
    }//GEN-LAST:event_filesToUploadListValueChanged

    private void uploadVideosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadVideosButtonActionPerformed
        // TODO add your handling code here:
        
        FilesUploadingFrame filesUploadingFrame = new FilesUploadingFrame(this, filesToUpload, fileIndex);
        //uploadFrame.setSize(250,420);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        // Determine the new location of the window
        Dimension filesUploadingFrameSize = filesUploadingFrame.getSize();
        
        // Move the window
        filesUploadingFrame.setLocation((dim.width - filesUploadingFrameSize.width)/2,
                (dim.height - filesUploadingFrameSize.height)/2);
        filesUploadingFrame.setVisible(true);
        
        this.setEnabled(false);        
        
       /* JProgressBar progressBar = filesUploadingFrame.getUploadProgressBar();
        progressBar.setMaximum(fileIndex + 1);
        progressBar.setStringPainted(true);
        try {
            for(int i = 0; i <= fileIndex; i++) {
                
                filesUploadingFrame.setUploadingVideoText("Currently uploading \""
                        + filesToUpload[i].getTitle() + "\"");
                progressBar.setValue(i+1);
                Thread.sleep(5000);
            }
        } catch(InterruptedException ignore) {}*/
        
        
        //filesUploadingFrame.dispatchEvent(new WindowEvent(filesUploadingFrame, WindowEvent.WINDOW_CLOSING));
        
        /*progressMonitor = new ProgressMonitor(this,
                                  "Uploading files, please wait",
                                  "", 0, fileIndex + 1);
        progressMonitor.setProgress(0);
        task = new UploadTask();
        task.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress" == evt.getPropertyName() ) {
                    int progress = (Integer) evt.getNewValue();
                    progressMonitor.setProgress(progress);
                    String message = String.format("Completed %d%%.\n", (int)((progress /(fileIndex + 1)) * 100));
                    progressMonitor.setNote(message);
                    
                    if (progressMonitor.isCanceled() || task.isDone()) {
                        if (progressMonitor.isCanceled()) {
                            task.cancel(true);
                            System.out.println("progress monitor cancelled in change");
                            
                        } else {
                            //JOptionPanetaskOutput.append("Task completed.\n");
                        }
                        UploadFrame.this.setEnabled(true);
                    }
                }
            }
        });
        
        task.execute();
        this.setEnabled(false); */       
    }//GEN-LAST:event_uploadVideosButtonActionPerformed

    private void cancelVideoUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelVideoUploadButtonActionPerformed
        // TODO add your handling code here:
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_cancelVideoUploadButtonActionPerformed

    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelVideoUploadButton;
    private javax.swing.JButton chooseFilesButton;
    private javax.swing.JButton editVideoButton;
    private javax.swing.JList filesToUploadList;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel lowerUploadPanel;
    private javax.swing.JButton removeFilesButton;
    private javax.swing.JButton uploadVideosButton;
    private javax.swing.JPanel upperUploadPanel;
    // End of variables declaration//GEN-END:variables
}
